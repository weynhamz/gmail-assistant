service: gmail-assistant

useDotenv: true

provider:
  name: google
  stage: ${opt:stage, 'dev'}
  region: us-central1
  runtime: nodejs12
  project: ${env:GCP_PROJECT}
  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:
  # https://serverless.com/framework/docs/providers/google/guide/credentials/
  #
  # the path to the credentials file needs to be absolute
  #  credentials: ~/.gcloud/keyfile.json
  credentials: ~/.config/gcloud/application_default_credentials.json
  environment:
    GCP_PROJECT: ${env:GCP_PROJECT}
    PUBSUB_TOPIC: ${self:custom.topicName}
    PUBSUB_MESSAGE_TOPIC: ${self:custom.messageTopicName}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET}
    GOOGLE_CALLBACK_URL: ${env:GOOGLE_CALLBACK_URL}

frameworkVersion: '3'

plugins:
  - serverless-plugin-scripts
  - serverless-google-cloudfunctions

# needs more granular excluding in production as only the serverless provider npm
# package should be excluded (and not the whole node_modules directory)
package:
  exclude:
    - node_modules/**
    - scripts/**
    - .gitignore
    - .git/**

custom:
  scripts:
    # NOTE: uncomment the following if you want the `sls-update-allow-unauthenticated.sh` script to
    # run after every deploy. Otherwise just run the script manually.
    hooks:
      "after:deploy:deploy": ./scripts/sls-update-allow-unauthenticated.sh
    commands:
      # make the specified function public
      mkfunc-pub: gcloud functions add-iam-policy-binding ${self:service}-${self:provider.stage}-${param:function, ""} --member="allUsers" --role="roles/cloudfunctions.invoker" --project=${self:provider.project} --region=${self:provider.region}
      # make the specified function private
      mkfunc-pvt: gcloud functions remove-iam-policy-binding ${self:service}-${self:provider.stage}-${param:function, ""} --member="allUsers" --role="roles/cloudfunctions.invoker" --project=${self:provider.project} --region=${self:provider.region}
  topicName: ${self:service}-${self:provider.stage}-gmail-push
  topicResource: projects/${env:GCP_PROJECT}/topics/${self:custom.topicName}
  messageTopicName: ${self:service}-${self:provider.stage}-gmail-message
  messageTopicResource: projects/${env:GCP_PROJECT}/topics/${self:custom.messageTopicName}

functions:
  auth_init:
    handler: auth_init
    events:
      - http: true
    accessControl:
      gcpIamPolicy:
        bindings:
        - role: roles/cloudfunctions.invoker
          members:
          - "allUsers"
    # unofficial flag that ties into the post-deploy script; set to false or omit the key if you
    # don't want to make the function public; you will need to run the `sls-update-allow-unauthenticated.sh`
    # script to update the function permissions
    allowUnauthenticated: true

  auth_callback:
    handler: auth_callback
    events:
      - http: true
    accessControl:
      gcpIamPolicy:
        bindings:
        - role: roles/cloudfunctions.invoker
          members:
          - "allUsers"
    # unofficial flag that ties into the post-deploy script; set to false or omit the key if you
    # don't want to make the function public; you will need to run the `sls-update-allow-unauthenticated.sh`
    # script to update the function permissions
    allowUnauthenticated: true

  # NOTE: the following uses an "event" event (pubSub event in this case).
  # Please create the corresponding resources in the Google Cloud
  # before deploying this service through Serverless
  watchGmailMessages:
    handler: watchGmailMessages
    events:
      - event:
          eventType: providers/cloud.pubsub/eventTypes/topic.publish
          resource: ${self:custom.topicResource}
    environment:
      FUNCTION_TRIGGER_TYPE: CLOUD_PUBSUB_TRIGGER

  fixThreadLabels:
    handler: fixThreadLabels
    events:
      - event:
          eventType: providers/cloud.pubsub/eventTypes/topic.publish
          resource: ${self:custom.messageTopicResource}
    environment:
      FUNCTION_TRIGGER_TYPE: CLOUD_PUBSUB_TRIGGER

# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
#resources:
#  resources:
#    - type: storage.v1.bucket
#      name: my-serverless-service-bucket
#  imports:
#    - path: my_template.jinja
resources:
  resources:
    - type: pubsub.v1.topic
      name: ${self:custom.topicName}
      properties:
        topic: ${self:custom.topicName}
      accessControl:
        gcpIamPolicy:
          bindings:
            - role: roles/pubsub.publisher
              members:
                  - "serviceAccount:gmail-api-push@system.gserviceaccount.com"
    - type: pubsub.v1.topic
      name: ${self:custom.messageTopicName}
      properties:
        topic: ${self:custom.messageTopicName}
